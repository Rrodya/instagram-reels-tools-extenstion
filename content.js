// Create and add the rotation button and volume slider
function createControls() {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	const controlsContainer = document.createElement('div')
	controlsContainer.id = 'video-controls'
	controlsContainer.style.cssText = `
		position: fixed;
		bottom: 20px;
		right: 20px;
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 10px;
		z-index: 9999;
	`
	document.body.appendChild(controlsContainer)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∑—É–Ω–æ–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
	const volumeSlider = document.createElement('input')
	volumeSlider.type = 'range'
	volumeSlider.id = 'volume-slider'
	volumeSlider.min = '0'
	volumeSlider.max = '100'
	volumeSlider.value = '10'
	volumeSlider.title = 'Volume'
	controlsContainer.appendChild(volumeSlider)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞
	const button = document.createElement('button')
	button.id = 'rotate-video-btn'
	button.innerHTML = 'üîÑ'
	button.title = 'Rotate Video'
	controlsContainer.appendChild(button)

	let isRotated = false // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞
	let currentVolume = 0.1 // –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ viewport
	function isElementInViewportCenter(element) {
		const rect = element.getBoundingClientRect()
		const viewportHeight = window.innerHeight
		const viewportCenter = window.scrollY + viewportHeight / 2
		const elementCenter = window.scrollY + rect.top + rect.height / 2

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20% –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ viewport
		const tolerance = viewportHeight * 0.2
		return Math.abs(elementCenter - viewportCenter) < tolerance
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤—Å–µ–º –≤–∏–¥–µ–æ
	function setVolumeToAllVideos(volume) {
		currentVolume = volume
		const audioElements = document.querySelectorAll('audio, video')
		audioElements.forEach(audio => {
			audio.volume = volume
		})
	}

	// –°–æ–∑–¥–∞–µ–º IntersectionObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ, –≤—Ö–æ–¥—è—â–∏—Ö –≤ viewport
	const videoObserver = new IntersectionObserver(
		entries => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const video = entry.target
					video.volume = currentVolume
				}
			})
		},
		{
			// –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π viewport
			rootMargin: '0px',
			threshold: 0.1, // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ 10% –≤–∏–¥–µ–æ –≤–∏–¥–Ω–æ
		}
	)

	// –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –≤–∏–¥–µ–æ
	const observedVideos = new Set()

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
	function observeVideo(video) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
		if (observedVideos.has(video)) {
			return
		}

		videoObserver.observe(video)
		observedVideos.add(video)

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
		video.addEventListener('remove', () => {
			unobserveVideo(video)
		})
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
	function unobserveVideo(video) {
		if (observedVideos.has(video)) {
			videoObserver.unobserve(video)
			observedVideos.delete(video)
		}
	}

	// –°–æ–∑–¥–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
	const mutationObserver = new MutationObserver(mutations => {
		mutations.forEach(mutation => {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
			if (mutation.addedNodes.length) {
				mutation.addedNodes.forEach(node => {
					if (node.nodeType === 1) {
						const videos = node.querySelectorAll('video, audio')
						videos.forEach(video => {
							observeVideo(video)
						})
					}
				})
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
			if (mutation.removedNodes.length) {
				mutation.removedNodes.forEach(node => {
					if (node.nodeType === 1) {
						const videos = node.querySelectorAll('video, audio')
						videos.forEach(video => {
							unobserveVideo(video)
						})
					}
				})
			}
		})
	})

	// –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
	mutationObserver.observe(document.body, {
		childList: true,
		subtree: true,
	})

	// –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤—Å–µ–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤–∏–¥–µ–æ
	document.querySelectorAll('video, audio').forEach(video => {
		observeVideo(video)
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞
	button.addEventListener('click', () => {
		const elements = document.querySelectorAll('[style]')
		const video = Array.from(elements).find(element => {
			const style = element.getAttribute('style')
			return (
				style &&
				style.includes('height') &&
				style.includes('width') &&
				isElementInViewportCenter(element)
			)
		})

		if (video) {
			if (!isRotated) {
				video.style.transform = 'rotate(-90deg)'
				isRotated = true
			} else {
				video.style.transform = 'rotate(0deg)'
				isRotated = false
			}
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
	volumeSlider.addEventListener('input', e => {
		const volume = e.target.value / 100
		setVolumeToAllVideos(volume)
	})

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∏–¥–µ–æ
	setVolumeToAllVideos(0.1)
}

// Initialize when the page loads
createControls()
